package Services;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import Controller.DBConection;
import Model.BookingRetriev;
import Model.Payment;

public class PaymentDBUtil {
	
	private static Connection con=null;
	private static PreparedStatement  statement=null;
	private static ResultSet rs=null;
    // Method to insert payment without Book ID
    public static boolean insertPayment(String dateStr, BigDecimal amount, String paymentMethod, String packageType) {
        boolean isSuccess = false;
        Connection con = null;
        PreparedStatement pstmt = null;
        
        String sql = "INSERT INTO payment (PayID, Date, Amount, PaymentMethod, TransactionID, PackageID,bookID) VALUES (?, ?, ?, ?, ?, ?, ?)";
        
        try {
            con = DBConection.getConnection();
            pstmt = con.prepareStatement(sql);
            String pID=generatePaymentID();
            pstmt.setString(1, pID);
            pstmt.setString(2, dateStr);
            pstmt.setBigDecimal(3, amount);
            String method=retievPaymentMethod(paymentMethod);
            pstmt.setString(4, method); 
            String trnasactionID=generateTransactioID();
            pstmt.setString(5, trnasactionID);
            String pckgID=retievPackageID(packageType);
            pstmt.setString(6, pckgID);
            String bId=BookingInsertServices.lastBookIDRelease();
            pstmt.setString(7,bId);
            
            
            int rowsAffected = pstmt.executeUpdate();
            if(rowsAffected > 0) {
                isSuccess = true;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if(pstmt != null) pstmt.close();
                if(con != null) con.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        return isSuccess;
    }
    public static String retievPackageID(String name) {
		
   		String packageName=null;
    		
    		try {
    			
    			con=DBConection.getConnection();
    			String sql="select PackageID from package where Name=?";
    			statement=con.prepareStatement(sql);
    			statement.setString(1, name);
    			
    			rs=statement.executeQuery();
    			while(rs.next()) {
    				packageName=rs.getString("PackageID");
    			}
    			
    		}catch(Exception e) {
    			e.printStackTrace();
    		}
    		return packageName;
    }
    
    //generate TransactionID
    public static String generateTransactioID() throws SQLException {
		
		try {
			con=DBConection.getConnection();
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String sql="Select MAX(TransactionID) AS maxTransactionID From payment";
		statement=con.prepareStatement(sql);
		rs=statement.executeQuery();
		
		String last=null;
		int number;
		if(rs.next()) {
			last=rs.getString("maxTransactionID");
		}
		
		if(last==null) {
			return "T00001";
		}
		number=Integer.parseInt(last.split("T")[1]);
		number++;
	
	return String.format("T%05d",number);
}

    //paymentId generator
  //generate TransactionID
    public static String generatePaymentID() throws SQLException {
		
		try {
			con=DBConection.getConnection();
		} catch (ClassNotFoundException | SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		String sql="Select MAX(PayID) AS maxPayID From payment";
		statement=con.prepareStatement(sql);
		rs=statement.executeQuery();
		
		String last=null;
		int number;
		if(rs.next()) {
			last=rs.getString("maxPayID");
		}
		
		if(last==null) {
			return "P00001";
		}
		number=Integer.parseInt(last.split("P")[1]);
		number++;
	
	return String.format("P%05d",number);
    }
    //retriev PaymentMethod
   public static String retievPaymentMethod(String name) {
		
   		String method=null;
    		
    		try {
    			
    			con=DBConection.getConnection();
    			String sql="select methodID from paymentmethods where method=?";
    			statement=con.prepareStatement(sql);
    			statement.setString(1, name);
    			
    			rs=statement.executeQuery();
    			while(rs.next()) {
    				method=rs.getString("methodID");
    			}
    			
    		}catch(Exception e) {
    			e.printStackTrace();
    		}
    		return method;
    }
    
    // Method to auto-generate next Payment ID
    public static String getAutoGeneratedPayID() {
        String newPayID = "P001"; // Default ID
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        String sql = "SELECT PayID FROM payment ORDER BY PayID DESC LIMIT 1";
        
        try {
            con = DBConection.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery(sql);
            
            if(rs.next()) {
                String lastID = rs.getString("PayID");
                int idNum = Integer.parseInt(lastID.substring(1)) + 1;
                newPayID = String.format("P%03d", idNum);
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if(rs != null) rs.close();
                if(stmt != null) stmt.close();
                if(con != null) con.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        return newPayID;
    }
    

    
    // Method to auto-generate next Transaction ID
    public static String getAutoGeneratedTransactionID() {
        String newTransactionID = "t/0001"; // Default ID
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        String sql = "SELECT TransactionID FROM payment ORDER BY TransactionID DESC LIMIT 1";
        
        try {
            con = DBConection.getConnection();
            stmt = con.createStatement();
            rs = stmt.executeQuery(sql);
            
            if(rs.next()) {
                String lastID = rs.getString("TransactionID");
                // Assuming the format is "t/0001"
                int idNum = Integer.parseInt(lastID.substring(2)) + 1;
                newTransactionID = String.format("t/%04d", idNum);
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if(rs != null) rs.close();
                if(stmt != null) stmt.close();
                if(con != null) con.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        return newTransactionID;
    }
    
    
    
    // Method to update payment (updated to exclude Book ID)
    public static boolean updatePayment(String payID, String dateStr, BigDecimal amount, String paymentMethod, String transactionID, String packageType) {
        boolean isSuccess = false;
        Connection con = null;
        PreparedStatement pstmt = null;
        
        String sql = "UPDATE payment SET Date = ?, Amount = ?, PaymentMethod = ?, TransactionID = ?, PackageID = ? WHERE PayID = ?";
        
        try {
            con = DBConection.getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, dateStr);
            pstmt.setBigDecimal(2, amount);
            String method=retievPaymentMethod(paymentMethod);
            pstmt.setString(3, method);                       
            pstmt.setString(4, transactionID);
            String pckgID=retievPackageID(packageType);
            pstmt.setString(5, pckgID);
            pstmt.setString(6, payID);
            
            int rowsAffected = pstmt.executeUpdate();
            if(rowsAffected > 0) {
                isSuccess = true;
            }
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if(pstmt != null) pstmt.close();
                if(con != null) con.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        return isSuccess;
    }
    
    // Method to retrieve payment details (updated to exclude Book ID)
    public static List<Payment> getPaymentDetails(int id){
        List<Payment> paymentList = new ArrayList<>();
        Connection con = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        
        String sql = "SELECT * FROM payment WHERE bookID IN(Select bookingID from booking where UserID=?)";
        
        try {
            con = DBConection.getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setInt(1, 1);
            rs = pstmt.executeQuery();
            
            while(rs.next()) {
                String payID = rs.getString("PayID");
                String dateStr = rs.getString("Date");
                BigDecimal amount = rs.getBigDecimal("Amount");
                String paymentMethod = rs.getString("PaymentMethod");
                String status=rs.getString("Status");
                String transactionID = rs.getString("TransactionID");
                String packageType = rs.getString("PackageID");
                
                Payment pay = new Payment(payID, dateStr, amount, paymentMethod,status, transactionID, packageType);
                paymentList.add(pay);
                
                for (Payment payment : paymentList) {
                    System.out.println(payment);
                }
            }
            
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if(rs != null) rs.close();
                if(pstmt != null) pstmt.close();
                if(con != null) con.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        return paymentList;
    }
    
    // Method to delete payment
    public static boolean deletePayment(String id) {
        boolean isSuccess = false;
        Connection con = null;
        PreparedStatement pstmt = null;
        
        String sql = "DELETE FROM payment WHERE PayID = ?";
        
        try {
            con = DBConection.getConnection();
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, id);
            
            int rowsAffected = pstmt.executeUpdate();
            if(rowsAffected > 0) {
                isSuccess = true;
            }
            
        } catch(Exception e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if(pstmt != null) pstmt.close();
                if(con != null) con.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
        }
        return isSuccess;
    }
  //retiew user data
  	public static Payment retriewPaymentDetailsUsingID(String pid) throws SQLException {
  		
  		Payment detail=null;
  		
  		try {
  			
  			con=DBConection.getConnection();
  			String sql="Select * from payment where PayID=? ";
  			
  			statement=con.prepareStatement(sql);
  			
  			statement.setString(1, pid);
  			
  			
  			rs=statement.executeQuery();
  			
  			while(rs.next()) {
  				
  				detail=new Payment();
  				String id=rs.getString("PayID");
  				String date=rs.getString("Date");
  				BigDecimal amount=rs.getBigDecimal("Amount");
  				String method=rs.getString("paymentMethod");
  				String status=rs.getString("Status");
  				String transID=rs.getString("TransactionID");
  				String pack_ID=rs.getString("PackageID");
  			
  				
  				detail=new Payment(id,date,amount,method,status,transID,pack_ID);
  				
  				return detail;
  			}
  			
  			
  		}catch(Exception e) {
  			e.printStackTrace();
  		}finally {
  			rs.close();
              statement.close();
              con.close();
  		}
  		return detail;
  	}
  	
}
